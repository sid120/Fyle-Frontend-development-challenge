{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  getUserDetails(username) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.github.com';\n  }\n  getUserRepositories(username, page, perPage) {\n    const url = `${this.apiUrl}/users/${username}/repos`;\n    const params = {\n      page: page.toString(),\n      per_page: perPage.toString()\n    };\n    return this.http.get(url, {\n      params\n    });\n  }\n  getRepoDetails(username, repoName) {\n    const url = `${this.apiUrl}/repos/${username}/${repoName}`;\n    return this.http.get(url);\n  }\n  // getUserProfile(username: string): Observable<any> {\n  //   const url = `${this.apiUrl}/users/${username}`;\n  //   return this.http.get<any>(url).pipe(\n  //     switchMap((user) => {\n  //       // Use forkJoin to make parallel requests for followers, following, and repos\n  //       return forkJoin([\n  //         this.http.get<any>(user.followers_url),\n  //         this.http.get<any>(user.following_url),\n  //         this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\n  //       ]).pipe(\n  //         map(([followers, following, repos]) => ({\n  //           ...user,\n  //           followers: followers.length, // Assuming the API returns an array\n  //           following: following.length, // Assuming the API returns an array\n  //           public_repos: repos.length // Assuming the API returns an array\n  //         }))\n  //       );\n  //     })\n  //   );\n  // }\n  getUserProfile(username) {\n    const url = `${this.apiUrl}/users/${username}`;\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ApiService","getUserDetails","username","Error","constructor","http","apiUrl","getUserRepositories","page","perPage","url","params","toString","per_page","get","getRepoDetails","repoName","getUserProfile","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\VIIT\\CL\\Fyle-Frontend-development-challenge\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  getUserDetails(username: string) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  private apiUrl = 'https://api.github.com';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserRepositories(username: string, page: number, perPage: number): Observable<any[]> {\r\n    const url = `${this.apiUrl}/users/${username}/repos`;\r\n    const params = {\r\n      page: page.toString(),\r\n      per_page: perPage.toString()\r\n    };\r\n    return this.http.get<any[]>(url, { params });\r\n  }\r\n\r\n  getRepoDetails(username: string, repoName: string): Observable<any> {\r\n    const url = `${this.apiUrl}/repos/${username}/${repoName}`;\r\n    return this.http.get<any>(url);\r\n  }\r\n\r\n  // getUserProfile(username: string): Observable<any> {\r\n  //   const url = `${this.apiUrl}/users/${username}`;\r\n\r\n  //   return this.http.get<any>(url).pipe(\r\n  //     switchMap((user) => {\r\n  //       // Use forkJoin to make parallel requests for followers, following, and repos\r\n  //       return forkJoin([\r\n  //         this.http.get<any>(user.followers_url),\r\n  //         this.http.get<any>(user.following_url),\r\n  //         this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\r\n  //       ]).pipe(\r\n  //         map(([followers, following, repos]) => ({\r\n  //           ...user,\r\n  //           followers: followers.length, // Assuming the API returns an array\r\n  //           following: following.length, // Assuming the API returns an array\r\n  //           public_repos: repos.length // Assuming the API returns an array\r\n  //         }))\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // }\r\n\r\n  getUserProfile(username: string): Observable<any> {\r\n    const url = `${this.apiUrl}/users/${username}`;\r\n    return this.http.get<any>(url);\r\n  }\r\n  \r\n}\r\n"],"mappings":";;AAQA,OAAM,MAAOA,UAAU;EACrBC,cAAcA,CAACC,QAAgB;IAC7B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wBAAwB;EAED;EAExCC,mBAAmBA,CAACL,QAAgB,EAAEM,IAAY,EAAEC,OAAe;IACjE,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUJ,QAAQ,QAAQ;IACpD,MAAMS,MAAM,GAAG;MACbH,IAAI,EAAEA,IAAI,CAACI,QAAQ,EAAE;MACrBC,QAAQ,EAAEJ,OAAO,CAACG,QAAQ;KAC3B;IACD,OAAO,IAAI,CAACP,IAAI,CAACS,GAAG,CAAQJ,GAAG,EAAE;MAAEC;IAAM,CAAE,CAAC;EAC9C;EAEAI,cAAcA,CAACb,QAAgB,EAAEc,QAAgB;IAC/C,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUJ,QAAQ,IAAIc,QAAQ,EAAE;IAC1D,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAMJ,GAAG,CAAC;EAChC;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAO,cAAcA,CAACf,QAAgB;IAC7B,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACJ,MAAM,UAAUJ,QAAQ,EAAE;IAC9C,OAAO,IAAI,CAACG,IAAI,CAACS,GAAG,CAAMJ,GAAG,CAAC;EAChC;EAAC,QAAAQ,CAAA,G;qBA/CUlB,UAAU,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVvB,UAAU;IAAAwB,OAAA,EAAVxB,UAAU,CAAAyB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}