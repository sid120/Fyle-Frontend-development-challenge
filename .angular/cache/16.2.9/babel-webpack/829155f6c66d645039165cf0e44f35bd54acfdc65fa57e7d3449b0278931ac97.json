{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.github.com';\n  }\n  getUserProfile(username) {\n    const url = `${this.apiUrl}/users/${username}`;\n    return this.http.get(url).pipe(switchMap(user => {\n      // Use forkJoin to make parallel requests for followers, following, and repos\n      return forkJoin([this.http.get(user.followers_url), this.http.get(user.following_url), this.http.get(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\n      ]).pipe(map(([followers, following, repos]) => ({\n        ...user,\n        followers: followers.length,\n        following: following.length,\n        public_repos: repos.length // Assuming the API returns an array\n      })));\n    }));\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["forkJoin","map","switchMap","ApiService","constructor","http","apiUrl","getUserProfile","username","url","get","pipe","user","followers_url","following_url","repos_url","followers","following","repos","length","public_repos","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\VIIT\\CL\\fyle-internship-challenge-23\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private apiUrl = 'https://api.github.com';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserProfile(username: string): Observable<any> {\r\n    const url = `${this.apiUrl}/users/${username}`;\r\n\r\n    return this.http.get<any>(url).pipe(\r\n      switchMap((user) => {\r\n        // Use forkJoin to make parallel requests for followers, following, and repos\r\n        return forkJoin([\r\n          this.http.get<any>(user.followers_url),\r\n          this.http.get<any>(user.following_url),\r\n          this.http.get<any>(user.repos_url + '?per_page=100') // You might need to adjust the per_page parameter\r\n        ]).pipe(\r\n          map(([followers, following, repos]) => ({\r\n            ...user,\r\n            followers: followers.length, // Assuming the API returns an array\r\n            following: following.length, // Assuming the API returns an array\r\n            public_repos: repos.length // Assuming the API returns an array\r\n          }))\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,QAAQ,QAAQ,MAAM;AAC3C,SAASC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;;AAK/C,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wBAAwB;EAED;EAExCC,cAAcA,CAACC,QAAgB;IAC7B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,UAAUE,QAAQ,EAAE;IAE9C,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAAMD,GAAG,CAAC,CAACE,IAAI,CACjCT,SAAS,CAAEU,IAAI,IAAI;MACjB;MACA,OAAOZ,QAAQ,CAAC,CACd,IAAI,CAACK,IAAI,CAACK,GAAG,CAAME,IAAI,CAACC,aAAa,CAAC,EACtC,IAAI,CAACR,IAAI,CAACK,GAAG,CAAME,IAAI,CAACE,aAAa,CAAC,EACtC,IAAI,CAACT,IAAI,CAACK,GAAG,CAAME,IAAI,CAACG,SAAS,GAAG,eAAe,CAAC,CAAC;MAAA,CACtD,CAAC,CAACJ,IAAI,CACLV,GAAG,CAAC,CAAC,CAACe,SAAS,EAAEC,SAAS,EAAEC,KAAK,CAAC,MAAM;QACtC,GAAGN,IAAI;QACPI,SAAS,EAAEA,SAAS,CAACG,MAAM;QAC3BF,SAAS,EAAEA,SAAS,CAACE,MAAM;QAC3BC,YAAY,EAAEF,KAAK,CAACC,MAAM,CAAC;OAC5B,CAAC,CAAC,CACJ;IACH,CAAC,CAAC,CACH;EACH;EAAC,QAAAE,CAAA,G;qBAzBUlB,UAAU,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVvB,UAAU;IAAAwB,OAAA,EAAVxB,UAAU,CAAAyB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}